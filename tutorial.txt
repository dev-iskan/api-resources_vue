lesson 1 {
    Registering user:
        we use postman to see our api queries, before using any kind of requests we have to set in headers:
            key: Accept value:  application/json
            key: Content-Type  value: application/json
        so laravel could response as json

        create RegisterController and StoreUserRequest to validate data, and add post route to registering users

    Authenticating users:
        we user laravel passport to authenticate users:
        composer require laravel/passport=~4.0 for verison 5.5 of laravel

        then migrate

        php artisan passport:install

        add hasapitoken trait to User model

        add Passport::routes(); to AuthServiceProvider boot() method

        change in config/auth.php guards to passport:
            'api' => [
                'driver' => 'passport',
                'provider' => 'users',
            ],

        Now we can send request through postman, for this via post method, we send data to ~/oauth/token:
            {
            	"grant_type" : "password",
            	"client_id" : "2",
            	"client_secret" : "pleyGHlump3nduFIh5LwxNj7VZ7QgUA3idAOWxo1",
            	"username" : "admin@co.com",
            	"password" : "123456",
            	"scope" : "*"
            }

        Then we can access /api/user, but before Postman allows us to save variables depending on Environment,
        thus add several environments depending on different users and there save authorization variable with access_token
        of exactly that user:
            [{"key":"Authorization","value":"Bearer eyJ0eXAiOiJKV1Q
            iLCJhbGciOiJSUzI1NiIsImp0aSI6IjJlMzljZGFkODA1NWU1OWE5NzA1MTRhNmMwYTY2MDVkMTU3NWQ5OTRkNDNkMTk5NmMzYTc2YjRmYzUyO
            DEyZjkyYjlmZmYyOWNiNjM0NTVlIn0.eyJhdWQiOiIyIiwianRpIjoiMmUzOWNkYWQ4MDU1ZTU5YTk3MDUxNGE2YzBhNjYwNWQxNTc1ZDk5
            NGQ0M2QxOTk2YzNhNzZiNGZjNTI4MTJmOTJiOWZmZjI5Y2I2MzQ1NWUiLCJpYXQiOjE1Mzc3MTIyNzYsIm5iZiI6MTUzNzcxMjI3NiwiZXhwIj
            oxNTY5MjQ4Mjc2LCJzdWIiOiIyIiwic2NvcGVzIjpbIioiXX0
            .Du8I0Wbmcq0rOIHrpSZ75chn83vF5fxhW9tNw8MUmqGoopZdUxokmZ2BudoNWxQ3eI6vLODvg6Rffj5HdMX
            -5xl_8_Ljail89Jy-
            XNjFxq9FuC8E_gceClUkWfCmltd5JKb-ZRXdfyKtSeT-
            Z1l4iESRWrKQc4YKohF8dRiu2NMNVuZfYRlxxc6CwLOkNItT44h4HDP3sR2gh_nEhuLdG8yo9VEw4cEBoSmGNByYte_uxa
            YXsPRLnNQjMMNl-Zq2qmCJNBu8t_Y0mX3KbPrcZOYN17VyLjIyDbboxatLZjDsYFaTnvUiPuh30nPcpjWp1H0I4hyb
            RLHL0AH3n8zW1zXO3_DTFfw8tJgtfQlqW6SEZGxNxP5MHPLky1yYisGmRTLEMdGkfiwXfIbAZf7f_Iqf5mAX0xdWL9PKQvn5yXMX_h49AtktYJt-
            8PV9P5ZNqqezzDLobrTZ8Mup5iFats0CIEBHOCiOvTPUOH1pNiuhss7nx-M1pKDyzaSmgBaPDAhfIxwNHe49u9GlKMdhzf
            5v4amJl9nKTd23FQ0vbl3RI0R8NixYNZ5MhsqQG8CHyoiy8qG02wGPCJRHCEKKncGXVm0xWs7agVa-eMJzxJmyFXsW
            0msrY7tF07p-Jxif-NCIMBNp5cFdxnLWfigRNYBenOCf6qNLhMxtYpN7T4k"}]

        then we can access api/user, by adding headers like before and also Authentication with value {{Authentication}}
}


lesson 2 {
    Use fractal:
    composer require spatie/laravel-fractal

    then we can create special folder for transformers and there let's create UserTransformer class where we will
    transform user model before returning (see UserTransformer)

    then in RegisterController we can return user using fractal:
        return fractal()
            ->item($user)
            ->transformWith(new UserTransformer())
            ->toArray();
}


lesson 3 {
    Create topics:
        create topics and posts models and migrations setting up relationships, create StoreTopicRequest and Controller
        add api route to group of topics test postman '/api/topics' with method=post

    Transform posts and topics:
        let's create transformers for topic and posts and in order to get related data in our case it is user and posts
        we need to do next:
            in topics transformer:
            add available includes:
                protected $availableIncludes = ['user', 'posts'];
            then also add methods to include thems:
                public function includeUser(Topic $topic) {
                    return $this->item($topic->user, new UserTransformer());
                }

                public function includePosts(Topic $topic) {
                    return $this->collection($topic->posts, new  PostTransformer());
                }

            in topic controller:
                return fractal()
                    ->item($topic)
                    ->parseIncludes(['user', 'posts.user']) //this method will include user and posts with deep include of user
                    ->transformWith(new TopicTransformer())
                    ->toArray();

    Topic index:
        we can also paginate our topics, showing all topics can be done with method index in topic controller
            public function index() {
                $topics = Topic::latestFirst()->paginate(3); // get topics by 3
                $topicsCollection = $topics->getCollection(); //create collection of topics in current page
                return fractal()
                    ->collection($topicsCollection) // return collection
                    ->parseIncludes(['user'])
                    ->transformWith(new TopicTransformer())
                    ->paginateWith(new IlluminatePaginatorAdapter($topics)) //pagination is created by PaginatorAdaptor
                    ->toArray();
            }

    Showing single topic
        create route and create method show in controller with same logic as in store method:
            public function show (Topic $topic) {
                return fractal()
                    ->item($topic)
                    ->parseIncludes(['user', 'posts.user'])
                    ->transformWith(new TopicTransformer())
                    ->toArray();
            }

    Updating topic
        create api route::patch and actually patch means editing content while put means change absolutelly,
        method update in controller :
            public function update(UpdateTopicRequest $request, Topic $topic) {
                $this->authorize('update', $topic);

                $topic->title = $request->get('title', $topic->title);
                $topic->save();

                return fractal()
                    ->item($topic)
                    ->parseIncludes(['user'])
                    ->transformWith(new TopicTransformer())
                    ->toArray();
            }
        here it is seen we use policy TopicPolicy and authorized it in AuthSeviceProvider, TopicPolicy method update:
            public function update(User $user, Topic $topic) {
                return $user->ownsTopic($topic);
            }
        And User model:
            public function ownsTopic(Topic $topic) {
                return $this->id === $topic->user->id;
            }
        which means only creator of topic can edit topics

    Delete topic:
        api route, method in controller, same policy to check authentication:
            public function destroy(Topic $topic){
                $this->authorize('destroy', $topic);

                $topic->delete();

                return response(null, 204); //successful but no content
            }
}

lesson 3 {
    Creating posts:
        we think about url structure and it will be like: api/topics/{topic}/posts/... thus we create post group inside
        topic group:
            Route::group(['prefix'=>'topics'], function () {
                Route::get('/', 'TopicController@index');
                Route::get('/{topic}', 'TopicController@show');
                Route::post('/', 'TopicController@store')->middleware('auth:api');
                Route::patch('/{topic}', 'TopicController@update')->middleware('auth:api');
                Route::delete('/{topic}', 'TopicController@destroy')->middleware('auth:api');

                Route::group(['prefix'=>'/{topic}/posts'], function () {
                    Route::post('/', 'PostController@store')->middleware('auth:api');
                });
            });

        then we create request, controller and ...

    Updating post:
        same as topics update

    Deleting post:
        same as topics delete

}


lesson 4 {

    Likes, setting:


}